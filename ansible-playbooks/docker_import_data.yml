---
- name: Import data into Docker Container
  hosts: webservers
  connection: local
  tasks:
    - set_fact:
        moodle_path: /var/www/html # from docker compose project
      tags: always

    - name: Create categories
      community.docker.docker_container_exec:
        container: "{{ docker.webserver_name }}"
        command: >
          /bin/bash -c
          "moosh -n category-import {{ item }}"
        chdir: "{{ moodle_path }}"
      loop: "{{ import_data.category_files }}"
      register: result
      tags: categories
    - debug: var=result.msg
      tags: categories

    - name: Import courses
      community.docker.docker_container_exec:
        container: "{{ docker.webserver_name }}"
        command: >
          /bin/bash -c
          "php admin/tool/uploadcourse/cli/uploadcourse.php --mode=createnew --file=`pwd`/{{ item }}"
        chdir: "{{ moodle_path }}"
      loop: "{{ import_data.course_files }}"
      register: result
      tags: courses
    - debug:
        msg: "{{ result.results | map(attribute='stdout_lines') }}"
      tags: courses

    # uploadcourse script does not restore the activity type for single activity courses,
    # so we force the type to 'page' since we want that for our demo data.
    - name: Fix activity type to 'page' for all single activity courses
      community.docker.docker_container_exec:
        container: "{{ docker.webserver_name }}"
        command: >
          /bin/bash -c
          "moosh -n sql-run \"UPDATE {{ db_config.table_prefix }}course_format_options SET value = 'page' WHERE format = 'singleactivity'\""
        chdir: "{{ moodle_path }}"
      tags: courses

    # Force course option to have one page per topic/week/section since this is the recommended design for PAD+.
    - name: Fix one page per topic/week for all courses (coursedisplay option)
      community.docker.docker_container_exec:
        container: "{{ docker.webserver_name }}"
        command: >
          /bin/bash -c
          "moosh -n sql-run \"UPDATE {{ db_config.table_prefix }}course_format_options SET value = 1 WHERE name = 'coursedisplay'\""
        chdir: "{{ moodle_path }}"
      tags: courses

    - name: Set HTML format for category description and course summary
      block:
      # Force category description format to HTML since this is not set by default after import.
      - name: Set HTML format for category description
        community.docker.docker_container_exec:
          container: "{{ docker.webserver_name }}"
          command: >
            /bin/bash -c
            "moosh -n sql-run \"UPDATE {{ db_config.table_prefix }}course_categories SET descriptionformat = 1\""
          chdir: "{{ moodle_path }}"
        tags: categories
      # Force course summary format to HTML since this is not set by default after import (except for home page).
      - name: Set HTML format for course summary
        community.docker.docker_container_exec:
          container: "{{ docker.webserver_name }}"
          command: >
            /bin/bash -c
            "moosh -n sql-run \"UPDATE {{ db_config.table_prefix }}course SET summaryformat = 1 WHERE id > 1\""
          chdir: "{{ moodle_path }}"
        tags: courses

    - name: Create user accounts and course enrolments
      community.docker.docker_container_exec:
        container: "{{ docker.webserver_name }}"
        command: >
          /bin/bash -c
          "php admin/tool/uploaduser/cli/uploaduser.php --file=`pwd`/{{ import_data.users_file }} --delimiter_name=comma"
        chdir: "{{ moodle_path }}"
      register: result
      tags: users
    - debug: var=result.stdout_lines
      tags: users

    - name: Assign category roles to users
      community.docker.docker_container_exec:
        container: "{{ docker.webserver_name }}"
        command: >
          /bin/bash -c
          "php local/padplusextensions/cli/assign_category_roles.php `pwd`/{{ import_data.users_categories_file }}"
        chdir: "{{ moodle_path }}"
      register: result
      tags: users_categories
    - debug: var=result.stdout_lines
      tags: users_categories

    - name: On-demand Tasks
      tags: never
      block:
        - name: Remove default category with id 1 (Miscellaneous)
          community.docker.docker_container_exec:
            container: "{{ docker.webserver_name }}"
            command: >
              /bin/bash -c
              "moosh -n category-delete 1"
            chdir: "{{ moodle_path }}"
          tags: remove-misc-category

        - name: Remove matched categories and content
          tags: remove-category-and-content
          block:
          - name: List categories ids
            community.docker.docker_container_exec:
              container: "{{ docker.webserver_name }}"
              command: >
                /bin/bash -c
                "moosh -n category-list {{ item }} | awk '/^[0-9]/ {print $1}'"
              chdir: "{{ moodle_path }}"
            loop: "{{ import_data.remove_categories }}"
            register: result
          - set_fact:
              category_ids: "{{ result.results | map(attribute='stdout_lines') | flatten }}"
          - debug: var=category_ids

          - name: Remove categories by id
            community.docker.docker_container_exec:
              container: "{{ docker.webserver_name }}"
              command: >
                /bin/bash -c
                "moosh -n category-delete {{ item }}"
              chdir: "{{ moodle_path }}"
            loop: "{{ category_ids }}"
            register: result
          - debug:
              msg: "{{ result.results | map(attribute='stdout_lines') }}"

        - name: Remove all existing users except guest, admin
          tags: remove-all-users
          block:
          - name: List existing usernames with id > 2 (exclude guest and admin ids)
            community.docker.docker_container_exec:
              container: "{{ docker.webserver_name }}"
              command: >
                /bin/bash -c
                "moosh -n user-list 'id > 2 AND deleted = 0' | awk '{print $1}'"
              chdir: "{{ moodle_path }}"
            register: result
          - set_fact:
              usernames: "{{ result.stdout_lines | join(' ') }}"
          - debug: var=usernames

          - name: Remove all existing users except guest/admin
            community.docker.docker_container_exec:
              container: "{{ docker.webserver_name }}"
              command: >
                /bin/bash -c
                "moosh -n user-delete {{ usernames }}"
              chdir: "{{ moodle_path }}"
            when: usernames | length > 0
