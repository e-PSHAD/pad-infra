---
- name: Moodle Config Set with Moosh
  hosts: webservers
  tasks:
    # Step 0 - build configuration
    - name: Combine generic and inventory configurations
      set_fact:
        moodle_config: "{{ moodle_config | combine(moodle) }}"
        moosh_config_file: pad_config_vars.yml
        moosh_prefix_path: /usr/local/share
        moosh_url: https://moodle.org/plugins/download.php/25565/moosh_moodle311_2021113000.zip
        moosh_version: '1.4'

    - name: Compute derived parameters for installation
      set_fact:
        moodle_path: "{{ moodle_config.install.prefix }}/{{ moodle_config.hostname }}"
        moosh_path: "{{ moosh_prefix_path }}/moosh/moosh.php"

    # Step 1 - Moosh installation
    - name: Check whether Moosh has already been downloaded
      stat:
        path: "{{ moosh_path }}"
      register: moosh_file

    - name: Retrieve Moosh current version
      ansible.builtin.shell: moosh -v | grep 'moosh version' | cut -d' ' -f 3
      register: moosh_current_version
      when: moosh_file.stat.exists

    - name: Install unzip package
      ansible.builtin.apt:
        name: unzip

    - name: Extract Moosh archive
      ansible.builtin.unarchive:
        src: "{{ moosh_url }}"
        dest: "{{ moosh_prefix_path }}"
        remote_src: yes
      when: moosh_current_version is not defined or moosh_current_version.stdout != moosh_version

    - name: Create link to Moosh script
      ansible.builtin.file:
        state: link
        path: /usr/local/bin/moosh
        src: "{{ moosh_path }}"
      when: not moosh_file.stat.exists

    # Step 2 - Moosh config set
    - name: Load config var from file
      include_vars:
        file: "{{ moosh_config_file }}"

    - name: Set config with Moosh
      ansible.builtin.shell: >
        sudo -u {{ webserver.webuser }}
        moosh config-set {{ item.key }} "{{ item.value }}" {{ item.plugin | default('core') }}
      args:
        chdir: "{{ moodle_path }}"
      loop: "{{ config }}"

    # Step 3 - Moosh capabilities set
    - name: Set capabilities with Moosh
      ansible.builtin.shell: >
        sudo -u {{ webserver.webuser }}
        moosh role-update-capability {{ item.role }} {{ item.capability }} {{ item.value }} {{ item.contextid | default(1) }}
      args:
        chdir: "{{ moodle_path }}"
      loop: "{{ capabilities }}"

    - name: Update Student context level to category
      ansible.builtin.shell: >
        sudo -u {{ webserver.webuser }}
        moosh -n role-update-contextlevel --category-on student
      args:
        chdir: "{{ moodle_path }}"

    # Step 3bis - editingteacher self-assign role
    - name: Set editingteacher self-assign role
      block:
      - name: Retrieve editingteacher id
        ansible.builtin.shell: >
          sudo -u {{ webserver.webuser }}
          moosh -n sql-run "SELECT ID FROM {{ db_config.table_prefix }}role WHERE shortname = 'editingteacher'" | awk '/id/ {print $NF}'
        args:
          chdir: "{{ moodle_path }}"
        register: result
      - set_fact: editingteacher_id="{{ result.stdout }}"

      - name: Retrieve status for editingteacher self-assign role
        ansible.builtin.shell: >
          sudo -u {{ webserver.webuser }}
          moosh -n sql-run "SELECT ID FROM {{ db_config.table_prefix }}role_allow_assign WHERE roleid = {{ editingteacher_id }} AND allowassign = {{ editingteacher_id }}"
        args:
          chdir: "{{ moodle_path }}"
        register: result
      - set_fact: editingteacher_self_assign_isset="{{ result.stdout }}"

      - name: Set editingteacher role assign if needed
        ansible.builtin.shell: >
          sudo -u {{ webserver.webuser }}
          moosh -n sql-run "INSERT INTO {{ db_config.table_prefix }}role_allow_assign (roleid, allowassign) VALUES ({{ editingteacher_id }}, {{ editingteacher_id }})"
        args:
          chdir: "{{ moodle_path }}"
        when: editingteacher_self_assign_isset == ''
